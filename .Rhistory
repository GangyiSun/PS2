# The DigitDist function takes as input x, which is a matrix or vector of election returns.
# The function returns a matrix containing the frequency of each integer occruing in the first significant digit in
# all elements of x (the full digit distribution).
DigitDist<-function(x){
x<-as.character(x)        # re-casts numeric vector/matrix x as a character matrix
x<-strsplit(x,"")         # splits each number in x into a sub-string
y<-NULL
for (i in 1:length(x)){   # obtains the integer in the first significant digit of each element of x
y[i]<-x[[i]][1]
}
y<-as.numeric(y)          # re-casts the characters into numerics
IntCount<-matrix(0,nrow=9,ncol=1)   # crates a matrix IntCount, which will contain the integer frequency information
rownames(IntCount)<-seq(1:9)
colnames(IntCount)<-'Frequency'
for (i in 1:9){           # obtains integer frequencies in y
count<-0
for (n in 1:length(y)){
if (y[n]==i){
count<-count+1
}
}
IntCount[i]<-count
}
return(IntCount)          # returns IntCount as the output of the function
}
# The StatM function takes as input x, which is a matrix of first significant digit integer
# frequencies (output from DigistDist).
# The function returns the Leemis' m statistic.
StatM<-function(IntCount){
Mi<-NA
for (i in 1:9){           # evaluates Xi-log10(1+1/i) for each integer i, stored in vector Mi
Xi<-IntCount[i]/sum(IntCount)     # Xi is the proportional frequency of integer i observed in x
Mi[i]<-Xi-log10(1+1/i)
}
m<-max(Mi)                # the Leemis' m statistic is the maximum value contained in vector Mi
return(m)                 # returns m as the output of the function
}
# The StatD function takes as input x, which is a matrix of first significant digit integer
# frequencies (output from DigistDist).
# The function returns the Cho-Gains' d statistic.
StatD<-function(IntCount){
Di<-NA
for (i in 1:9){           # evaluates (Xi-log10(1+1/i))^2 for each integer i, stored in vector Mi
Xi<-IntCount[i]/sum(IntCount)     # Xi is the proportional frequency of integer i observed in x
Di[i]<-(Xi-log10(1+1/i))^2
}
d<-sqrt(sum(Di))          # the Cho-Gains' d statistic is the sum of all values contained in vector Di
return(d)                 # returns d as the output of the function
}
# The CalcBenfordLaw function is the answer to question 1.
# The CalcBenfordLaw function takes as input x, m and d.
# x is a matrix or vector of election returns.
# m is a boolean. if m==true, the function will calculate and report the Leemis' m statistic.
# d is a boolean. if d==true, the function will calculate and report the Cho-Gains' d statistic.
# The function returns the full first-digit distribution of elector returns x, the m statistic if m==true,
# and the d statistic if d==true.
CalcBenfordLaw<-function(x,m,d){
Lm<-NULL
Cd<-NULL
Dist<-DigitDist(x)        # obtains first-digit integer distribution of x
if (m==TRUE){             # if m==true, calculate m statistic, save as Lm
m<-StatM(Dist)
Lm<-c(Lm,m)
}
if (d==TRUE){
d<-StatD(Dist)
Cd<-c(Cd,d)             # if d==true, calculate d statistic, save as Cd
}
result<-list(Lm,Cd,Dist)
names(result)<-c("Leemis' m statistic","Cho-Gains' d statistic", "Full Digit Distribution")
return(result)            # returns the m statistic, d statistic and full digit distribution as a list
}
# Sample data used to check that the functions work.
x<-c(1234,125356,1,234,222,3,34567,4567,498,5555,5987,61234,671234,71,74,88,80,95,99999,9)
xDist<-DigitDist(x)
xDist
StatM(xDist)
StatD(xDist)
CalcBenfordLaw(x,T,T)
# The function mSig takes as input m, which is the Leemis' m stastic.
# The function returns characters containing *s that indicate the level of significance of the m statistic.
mSig<-function(m){
mSig<-NULL
if (m>0.851 & m<=0.967){    # rules to determine the level of significance of the m statistic
mSig<-'*'
}else if (m>0.967 & m<=1.212){
mSig<-'**'
}else if (m>1.212){
mSig<-'***'
}
return(mSig)                # returns the level of significance of the m statistic, indicated by *s
# returns an empty string if p-value greater than 0.10.
}
# The function dSig takes as input d, which is the Cho-Gains' d stastic.
# The function returns characters containing *s that indicate the level of significance of the d statistic.
dSig<-function(d){
dSig<-NULL
if (d>1.212 & d<=1.330){    # rules to determine the level of significance of the d statistic
dSig<-'*'
}else if (d>1.330 & d<=1.569){
dSig<-'**'
}else if (d>1.569){
dSig<-'***'
}
return(dSig)                # returns the level of significance of the d statistic, indicated by *s
# returns an empty string if p-value greater than 0.10.
}
# The print.benfords.1 function is the answer to part 1 of question 2.
# The print.benfords.1 function takes as input x, which is a matrix or vector of election returns.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance.
print.benfords.1<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
# ADD THIS
# *** p<0.01, ** p<0.05, * p<0.1
}
# The print.benfords.2 function is the answer to part 2 of question 2.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance. It also creates a csv file containing the output of the table.
print.benfords.2<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
sink(file="New.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.1(x)
print.benfords.2(x)
# The print.benfords.2 function is the answer to part 2 of question 2.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance. It also creates a csv file containing the output of the table.
print.benfords.2<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
sink(file="~/Documents/GitHub/PS2/New.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.1(x)
print.benfords.2(x)
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.1(x)
print.benfords.2(x)
# The print.benfords.2 function is the answer to part 2 of question 2.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance. It also creates a csv file containing the output of the table.
print.benfords.2<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
sink(file="~/Documents/WashU - School Work/R Working Folder/New.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.1(x)
print.benfords.2(x)
# The print.benfords.2 function is the answer to part 2 of question 2.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance. It also creates a csv file containing the output of the table.
print.benfords.2<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
sink(file="~/Documents/WashU - School Work/R Working Folder/New2.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.1(x)
print.benfords.2(x)
sink("~/Documents/WashU - School Work/R Working Folder/New2.csv")
# The print.benfords.2 function is the answer to part 2 of question 2.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance. It also creates a csv file containing the output of the table.
print.benfords.2<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
sink("~/Documents/WashU - School Work/R Working Folder/New2.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.1(x)
print.benfords.2(x)
# The print.benfords.2 function is the answer to part 2 of question 2.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance. It also creates a csv file containing the output of the table.
print.benfords.2<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
sink("~/Documents/WashU - School Work/R Working Folder/New2.csv")
}
# The print.benfords.2 function is the answer to part 2 of question 2.
# The function returns a table containing the values of the m and d statistic and information regarding each
# statistics' level of significance. It also creates a csv file containing the output of the table.
print.benfords.2<-function(x){
Dist<-DigitDist(x)     # obtains first-digit integer distribution of x
m<-round(StatM(Dist),4)
d<-round(StatD(Dist),4)
mSigValue<-mSig(m)
dSigValue<-dSig(d)
mFinal<-paste(m,mSigValue,sep="")
dFinal<-paste(d,dSigValue,sep="")
table<-as.data.frame(c(mFinal,dFinal))
rownames(table)<-c("Leemis' m statistic","Cho-Gains' d statistic")
colnames(table)<-'Value'
return(table)
sink("~/Documents/WashU - School Work/R Working Folder/New3.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.2(x)
# The print.benfords.2 function is the answer to part 2 of question 2.
# The print.benfords.1 function takes as input x, which is a matrix or vector of election returns.
# The function returns ______ ADD TO THIS
print.benfords.2<-function(x){
print(x)
sink("~/Documents/WashU - School Work/R Working Folder/New3.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.2(x)
# The print.benfords.2 function is the answer to part 2 of question 2.
# The print.benfords.1 function takes as input x, which is a matrix or vector of election returns.
# The function returns ______ ADD TO THIS
print.benfords.2<-function(x){
print(x)
sink("~/Documents/WashU - School Work/R Working Folder/New3.csv")
}
# The print.benfords.2 function is the answer to part 2 of question 2.
# The print.benfords.1 function takes as input x, which is a matrix or vector of election returns.
# The function returns ______ ADD TO THIS
print.benfords.2<-function(x){
x<-as.data.frame(x)
x
sink("~/Documents/WashU - School Work/R Working Folder/New3.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.2(x)
# The print.benfords.2 function is the answer to part 2 of question 2.
# The print.benfords.1 function takes as input x, which is a matrix or vector of election returns.
# The function returns ______ ADD TO THIS
print.benfords.2<-function(x){
x<-as.data.frame(x)
print(x)
sink("~/Documents/WashU - School Work/R Working Folder/New3.csv")
}
# Sample data used to check that the functions work.
x<-c(rep(9,2000),1,2,3,4,5,6,7,8)
print.benfords.2(x)
